% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen-list.r
\name{gen.list.expr}
\alias{gen.list.expr}
\alias{gen.vector.expr}
\alias{gen.named.list.expr}
\alias{gen.named.vector.expr}
\title{Generate List and Vector Expressions with List Comprehension}
\usage{
gen.list.expr(expr, ...)

gen.vector.expr(expr, ...)

gen.named.list.expr(str, expr, ...)

gen.named.vector.expr(str, expr, ...)
}
\arguments{
\item{expr}{A base expression which is partially evaluated for all combinations of variables. 
It may still contain free variables.}

\item{...}{Arbitrary many variable ranges and conditions.}

\item{str}{A character pattern, containing expressions to be evaluated in \{\}-brackets.}
}
\description{
Functions to transform a base expression containing free variables into a list or a vector of expressions,
based on variable ranges and additional conditions.
}
\details{
Works similar to \code{\link{gen.list}} and \code{\link{gen.vector}}, but returns expressions to be evaluated later.
The argument \code{expr} is partially evaluated, where all free variables are substituted for which a range is given.
The other variables remain untouched.

It may be especially useful to use the index notation for variables ending with an underscore.
For instance, \code{a_(i+1)} is evaluated to \code{a_4} for \code{i = 3}.
}
\examples{
# An expression which is partially evaluated
gen.list.expr(a_i + 2 * i, i = 1:4)

# Generate an expression with placeholders a_i,
# generate data for a_1, ..., a_4 and finally evaluate it
expr <- gen.vector.expr(a_i + a_(j+1), i = 1:3, j = 1:3, i != j)
data <- gen.data.frame(c(a_1 = a_1, ..., a_4 = a_4), a_ = 1:2)
eval(expr, data)

}
\seealso{
\code{\link{gen.data.frame}} to generate data frames, 
  \code{\link{gen.list}} to generate lists, 
  \code{\link{gen.list.char}} to generate lists of characters, 
  and \link{listcompr} for an overview of all list comprehension functions.
}
